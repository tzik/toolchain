diff --git a/lib/internal/process/next_tick.js b/lib/internal/process/next_tick.js
index 24104ec34a..df6311f2d4 100644
--- a/lib/internal/process/next_tick.js
+++ b/lib/internal/process/next_tick.js
@@ -5,7 +5,7 @@ const {
   // and to avoid unnecessary calls into JS land.
   tickInfo,
   // Used to run V8's micro task queue.
-  runMicrotasks,
+  performMicrotaskCheckpoint,
   setTickCallback
 } = internalBinding('task_queue');
 
@@ -44,7 +44,7 @@ const queue = new FixedQueue();
 
 function runNextTicks() {
   if (!hasTickScheduled() && !hasRejectionToWarn())
-    runMicrotasks();
+    performMicrotaskCheckpoint();
   if (!hasTickScheduled() && !hasRejectionToWarn())
     return;
 
@@ -78,7 +78,7 @@ function processTicksAndRejections() {
       emitAfter(asyncId);
     }
     setHasTickScheduled(false);
-    runMicrotasks();
+    performMicrotaskCheckpoint();
   } while (!queue.isEmpty() || processPromiseRejections());
   setHasRejectionToWarn(false);
 }
diff --git a/src/callback_scope.cc b/src/callback_scope.cc
index 885134799f..80ff34f61e 100644
--- a/src/callback_scope.cc
+++ b/src/callback_scope.cc
@@ -12,6 +12,7 @@ using v8::HandleScope;
 using v8::Isolate;
 using v8::Local;
 using v8::MaybeLocal;
+using v8::MicrotasksScope;
 using v8::NewStringType;
 using v8::Object;
 using v8::String;
@@ -103,7 +104,7 @@ void InternalCallbackScope::Close() {
 
   if (!env_->can_call_into_js()) return;
   if (!tick_info->has_tick_scheduled()) {
-    env_->isolate()->RunMicrotasks();
+    MicrotasksScope::PerformCheckpoint(env_->isolate());
   }
 
   // Make sure the stack unwound properly. If there are nested MakeCallback's
diff --git a/src/node_task_queue.cc b/src/node_task_queue.cc
index b7bafe6db6..38bed5900e 100644
--- a/src/node_task_queue.cc
+++ b/src/node_task_queue.cc
@@ -17,6 +17,7 @@ using v8::kPromiseRejectAfterResolved;
 using v8::kPromiseRejectWithNoHandler;
 using v8::kPromiseResolveAfterResolved;
 using v8::Local;
+using v8::MicrotasksScope;
 using v8::Number;
 using v8::Object;
 using v8::Promise;
@@ -26,8 +27,9 @@ using v8::Value;
 
 namespace task_queue {
 
-static void RunMicrotasks(const FunctionCallbackInfo<Value>& args) {
-  args.GetIsolate()->RunMicrotasks();
+static void PerformMicrotaskCheckpoint(
+    const FunctionCallbackInfo<Value>& args) {
+  MicrotasksScope::PerformCheckpoint(args.GetIsolate());
 }
 
 static void SetTickCallback(const FunctionCallbackInfo<Value>& args) {
@@ -103,7 +105,9 @@ static void Initialize(Local<Object> target,
   Isolate* isolate = env->isolate();
 
   env->SetMethod(target, "setTickCallback", SetTickCallback);
-  env->SetMethod(target, "runMicrotasks", RunMicrotasks);
+  env->SetMethod(target,
+                 "performMicrotaskCheckpoint",
+                 PerformMicrotaskCheckpoint);
   target->Set(env->context(),
               FIXED_ONE_BYTE_STRING(isolate, "tickInfo"),
               env->tick_info()->fields().GetJSArray()).FromJust();
